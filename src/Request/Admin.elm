{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Admin exposing (adminCleanResources, adminUpdateBuild, adminUpdateDeployment, adminUpdateHook, adminUpdateRepo, adminUpdateSecret, adminUpdateService, adminUpdateStep, adminUpdateUser, allBuildsQueue, registerToken)

import Data.Secret exposing (Secret, secretDecoder, secretEncoder)
import Data.BuildQueue exposing (BuildQueue, buildQueueDecoder)
import Data.User exposing (User, userDecoder, userEncoder)
import Data.Repo exposing (Repo, repoDecoder, repoEncoder)
import Data.Build exposing (Build, buildDecoder, buildEncoder)
import Data.Error exposing (Error, errorDecoder, errorEncoder)
import Data.Service exposing (Service, serviceDecoder, serviceEncoder)
import Data.Webhook exposing (Webhook, webhookDecoder, webhookEncoder)
import Data.Token exposing (Token, tokenDecoder)
import Data.String exposing (Decode.string, String)
import Data.Step exposing (Step, stepDecoder, stepEncoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Update pending build resources to error status before a given time
-}
adminCleanResources : Error -> Http.Request ()
adminCleanResources model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/clean"
    , headers = []
    , body = Http.jsonBody <| errorEncoder model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a build in the database
-}
adminUpdateBuild : Build -> Http.Request Build
adminUpdateBuild model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/build"
    , headers = []
    , body = Http.jsonBody <| buildEncoder model
    , expect = Http.expectJson buildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get All (Not Implemented)
-}
adminUpdateDeployment : Http.Request String
adminUpdateDeployment =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/deployment"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a hook in the database
-}
adminUpdateHook : Webhook -> Http.Request Webhook
adminUpdateHook model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/hook"
    , headers = []
    , body = Http.jsonBody <| webhookEncoder model
    , expect = Http.expectJson webhookDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a repo in the database
-}
adminUpdateRepo : Repo -> Http.Request Repo
adminUpdateRepo model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/repo"
    , headers = []
    , body = Http.jsonBody <| repoEncoder model
    , expect = Http.expectJson repoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a secret in the database
-}
adminUpdateSecret : Secret -> Http.Request Secret
adminUpdateSecret model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/secret"
    , headers = []
    , body = Http.jsonBody <| secretEncoder model
    , expect = Http.expectJson secretDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a hook in the database
-}
adminUpdateService : Service -> Http.Request Service
adminUpdateService model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/service"
    , headers = []
    , body = Http.jsonBody <| serviceEncoder model
    , expect = Http.expectJson serviceDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a step in the database
-}
adminUpdateStep : Step -> Http.Request Step
adminUpdateStep model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/step"
    , headers = []
    , body = Http.jsonBody <| stepEncoder model
    , expect = Http.expectJson stepDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a user in the database
-}
adminUpdateUser : User -> Http.Request User
adminUpdateUser model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/admin/user"
    , headers = []
    , body = Http.jsonBody <| userEncoder model
    , expect = Http.expectJson userDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get all of the running and pending builds in the database
-}
allBuildsQueue : Http.Request (List BuildQueue)
allBuildsQueue =
    { method = "GET"
    , url = basePath ++ "/api/v1/admin/builds/queue"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list buildQueueDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a worker registration token
-}
registerToken : String -> Http.Request Token
registerToken worker =
    { method = "POST"
    , url = basePath ++ "/api/v1/admin/workers/" ++ worker ++ "/register-token"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson tokenDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


