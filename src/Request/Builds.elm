{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Builds exposing (approveBuild, cancelBuild, createBuild, deleteBuild, getBuild, getBuildByID, getBuildExecutable, getBuildGraph, getBuildToken, listBuildsForOrg, listBuildsForRepo, listLogsForBuild, restartBuild, updateBuild)

import Data.Graph exposing (Graph, graphDecoder)
import Data.Log exposing (Log, logDecoder)
import Data.Build exposing (Build, buildDecoder, buildEncoder)
import Data.Error exposing (Error, errorDecoder)
import Data.Token exposing (Token, tokenDecoder)
import Data.String exposing (Decode.string, String)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Sign off on a build to run from an outside contributor
-}
approveBuild : String -> String -> Int -> Http.Request String
approveBuild org repo build =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/approve"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Cancel a running build
-}
cancelBuild : String -> String -> Int -> Http.Request String
cancelBuild repo org build =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/cancel"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Create a build in the configured backend
-}
createBuild : String -> String -> Build -> Http.Request String
createBuild org repo model =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds"
    , headers = []
    , body = Http.jsonBody <| buildEncoder model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete a build in the configured backend
-}
deleteBuild : String -> String -> Int -> Http.Request String
deleteBuild org repo build =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a build in the configured backend
-}
getBuild : String -> String -> Int -> Http.Request Build
getBuild org repo build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson buildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a single build by its id in the configured backend
-}
getBuildByID : Float -> Http.Request Build
getBuildByID id =
    { method = "GET"
    , url = basePath ++ "/api/v1/search/builds/" ++ toString id
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson buildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a build executable in the configured backend
-}
getBuildExecutable : String -> String -> Int -> Http.Request Build
getBuildExecutable org repo build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/executable"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson buildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get directed a-cyclical graph for a build in the configured backend
-}
getBuildGraph : String -> String -> Int -> Http.Request Graph
getBuildGraph org repo build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/graph"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson graphDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a build token
-}
getBuildToken : String -> String -> Int -> Http.Request Token
getBuildToken repo org build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/token"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson tokenDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a list of builds by org in the configured backend
-}
listBuildsForOrg : String -> Http.Request (List Build)
listBuildsForOrg org =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/builds"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list buildDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get builds from the configured backend
-}
listBuildsForRepo : String -> String -> Http.Request (List Build)
listBuildsForRepo org repo =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list buildDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   List logs for a build in the configured backend
-}
listLogsForBuild : String -> String -> Int -> Http.Request (List Log)
listLogsForBuild org repo build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/logs"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list logDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Restart a build in the configured backend
-}
restartBuild : String -> String -> Int -> Http.Request String
restartBuild org repo build =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Updates a build in the configured backend
-}
updateBuild : String -> String -> Int -> Build -> Http.Request Build
updateBuild org repo build model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build
    , headers = []
    , body = Http.jsonBody <| buildEncoder model
    , expect = Http.expectJson buildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


