{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Repos exposing (chownRepo, createRepo, deleteRepo, getRepo, listRepos, listReposForOrg, repairRepo, updateRepo)

import Data.Repo exposing (Repo, repoDecoder, repoEncoder)
import Data.Error exposing (Error, errorDecoder)
import Data.String exposing (Decode.string, String)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Change the owner of the webhook for a repo
-}
chownRepo : String -> String -> Http.Request String
chownRepo org repo =
    { method = "PATCH"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/chown"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Create a repo in the configured backend
-}
createRepo : Repo -> Http.Request Repo
createRepo model =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos"
    , headers = []
    , body = Http.jsonBody <| repoEncoder model
    , expect = Http.expectJson repoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete a repo in the configured backend
-}
deleteRepo : String -> String -> Http.Request String
deleteRepo org repo =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a repo in the configured backend
-}
getRepo : String -> String -> Http.Request Repo
getRepo org repo =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson repoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get all repos in the configured backend
-}
listRepos : Http.Request (List Repo)
listRepos =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list repoDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get all repos for the provided org in the configured backend
-}
listReposForOrg : String -> Http.Request (List Repo)
listReposForOrg org =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list repoDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Remove and recreate the webhook for a repo
-}
repairRepo : String -> String -> Http.Request String
repairRepo org repo =
    { method = "PATCH"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/repair"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a repo in the configured backend
-}
updateRepo : String -> String -> Repo -> Http.Request Repo
updateRepo org repo model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo
    , headers = []
    , body = Http.jsonBody <| repoEncoder model
    , expect = Http.expectJson repoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


