{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Pipelines exposing (compilePipeline, createPipeline, deletePipeline, expandPipeline, getPipeline, getTemplates, listPipelines, updatePipeline, validatePipeline)

import Data.Error exposing (Error, errorDecoder)
import Data.String exposing (Decode.string, String)
import Data.PipelineBuild exposing (PipelineBuild, pipelineBuildDecoder)
import Data.Pipeline exposing (Pipeline, pipelineDecoder, pipelineEncoder)
import Data.Template exposing (Template, templateDecoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Get, expand and compile a pipeline from the configured backend
-}
compilePipeline : String -> String -> String -> Http.Request PipelineBuild
compilePipeline repo org pipeline =
    { method = "POST"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline ++ "/compile"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson pipelineBuildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Create a pipeline in the configured backend
-}
createPipeline : String -> String -> Pipeline -> Http.Request Pipeline
createPipeline org repo model =
    { method = "POST"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo
    , headers = []
    , body = Http.jsonBody <| pipelineEncoder model
    , expect = Http.expectJson pipelineDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete a pipeline from the configured backend
-}
deletePipeline : String -> String -> String -> Http.Request String
deletePipeline org repo pipeline =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get and expand a pipeline from the configured backend
-}
expandPipeline : String -> String -> String -> Http.Request PipelineBuild
expandPipeline repo org pipeline =
    { method = "POST"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline ++ "/expand"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson pipelineBuildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a pipeline from the configured backend
-}
getPipeline : String -> String -> String -> Http.Request Pipeline
getPipeline org repo pipeline =
    { method = "GET"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson pipelineDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a map of templates utilized by a pipeline from the configured backend
-}
getTemplates : String -> String -> String -> Http.Request Template
getTemplates repo org pipeline =
    { method = "GET"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline ++ "/templates"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson templateDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   List pipelines from the configured backend
-}
listPipelines : String -> String -> Http.Request (List Pipeline)
listPipelines org repo =
    { method = "GET"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list pipelineDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a pipeline in the configured backend
-}
updatePipeline : String -> String -> String -> Pipeline -> Http.Request Pipeline
updatePipeline org repo pipeline model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline
    , headers = []
    , body = Http.jsonBody <| pipelineEncoder model
    , expect = Http.expectJson pipelineDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get, expand and validate a pipeline from the configured backend
-}
validatePipeline : String -> String -> String -> Http.Request String
validatePipeline repo org pipeline =
    { method = "POST"
    , url = basePath ++ "/api/v1/pipelines/" ++ org ++ "/" ++ repo ++ "/" ++ pipeline ++ "/validate"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


