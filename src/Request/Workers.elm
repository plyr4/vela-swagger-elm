{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Workers exposing (createWorker, deleteWorker, getWorker, listWorkers, refreshWorkerAuth, updateWorker)

import Data.Worker exposing (Worker, workerDecoder, workerEncoder)
import Data.Error exposing (Error, errorDecoder)
import Data.Token exposing (Token, tokenDecoder)
import Data.String exposing (Decode.string, String)
import Data.#DefinitionsToken exposing (#DefinitionsToken, #DefinitionsTokenDecoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Create a worker for the configured backend
-}
createWorker : Worker -> Http.Request #DefinitionsToken
createWorker model =
    { method = "POST"
    , url = basePath ++ "/api/v1/workers"
    , headers = []
    , body = Http.jsonBody <| workerEncoder model
    , expect = Http.expectJson #DefinitionsTokenDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete a worker for the configured backend
-}
deleteWorker : String -> Http.Request String
deleteWorker worker =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/workers/" ++ worker
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Retrieve a worker for the configured backend
-}
getWorker : String -> Http.Request Worker
getWorker worker =
    { method = "GET"
    , url = basePath ++ "/api/v1/workers/" ++ worker
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson workerDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Retrieve a list of workers for the configured backend
-}
listWorkers : Http.Request (List Worker)
listWorkers =
    { method = "GET"
    , url = basePath ++ "/api/v1/workers"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list workerDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Refresh authorization token for worker
-}
refreshWorkerAuth : String -> Http.Request Token
refreshWorkerAuth worker =
    { method = "POST"
    , url = basePath ++ "/api/v1/workers/" ++ worker ++ "/refresh"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson tokenDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a worker for the configured backend
-}
updateWorker : String -> Worker -> Http.Request Worker
updateWorker worker model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/workers/" ++ worker
    , headers = []
    , body = Http.jsonBody <| workerEncoder model
    , expect = Http.expectJson workerDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


