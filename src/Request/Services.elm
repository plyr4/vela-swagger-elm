{-
   Vela server
   API for the Vela server

   OpenAPI spec version: 0.23.2
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Services exposing (createService, createServiceLog, deleteService, deleteServiceLog, getService, getServiceLog, listServices, updateService, updateServiceLog)

import Data.Log exposing (Log, logDecoder, logEncoder)
import Data.Service exposing (Service, serviceDecoder, serviceEncoder)
import Data.Error exposing (Error, errorDecoder)
import Data.String exposing (Decode.string, String)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-
   Create a service for a build in the configured backend
-}
createService : String -> String -> Int -> Service -> Http.Request Service
createService org repo build model =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services"
    , headers = []
    , body = Http.jsonBody <| serviceEncoder model
    , expect = Http.expectJson serviceDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Create the logs for a service
-}
createServiceLog : String -> String -> Int -> Int -> Log -> Http.Request ()
createServiceLog org repo build service model =
    { method = "POST"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service ++ "/logs"
    , headers = []
    , body = Http.jsonBody <| logEncoder model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete a service for a build in the configured backend
-}
deleteService : String -> String -> Int -> Int -> Http.Request String
deleteService org repo build service =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete the logs for a service
-}
deleteServiceLog : String -> String -> Int -> Int -> Http.Request String
deleteServiceLog org repo build service =
    { method = "DELETE"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service ++ "/logs"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a service for a build in the configured backend
-}
getService : String -> String -> Int -> Int -> Http.Request Service
getService org repo build service =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson serviceDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Retrieve the logs for a service
-}
getServiceLog : String -> String -> Int -> Int -> Http.Request Log
getServiceLog org repo build service =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service ++ "/logs"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson logDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get a list of all services for a build in the configured backend
-}
listServices : String -> String -> Int -> Http.Request (List Service)
listServices org repo build =
    { method = "GET"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson (Decode.list serviceDecoder)
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update a service for a build in the configured backend
-}
updateService : String -> String -> Int -> Int -> Service -> Http.Request Service
updateService org repo build service model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service
    , headers = []
    , body = Http.jsonBody <| serviceEncoder model
    , expect = Http.expectJson serviceDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Update the logs for a service
-}
updateServiceLog : String -> String -> Int -> Int -> Log -> Http.Request Log
updateServiceLog org repo build service model =
    { method = "PUT"
    , url = basePath ++ "/api/v1/repos/" ++ org ++ "/" ++ repo ++ "/builds/" ++ toString build ++ "/services/" ++ toString service ++ "/logs"
    , headers = []
    , body = Http.jsonBody <| logEncoder model
    , expect = Http.expectJson logDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


